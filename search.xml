<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[智能测试]]></title>
      <url>blog.jiangbo.work/2017/02/10/%E6%99%BA%E8%83%BD%E6%B5%8B%E8%AF%95/</url>
      <content type="html"><![CDATA[<h2 id="智能"><a href="#智能" class="headerlink" title="智能"></a>智能</h2><blockquote>
<p><strong>何为智能?</strong></p>
<p>所谓智能：　即是可以高效完成一些有挑战的事情．</p>
<p><strong>如何实现智能?</strong>    </p>
<p>这一问题放在后面回答．
 　　　　</p>
<p># </p>
<h3 id="测试类型"><a href="#测试类型" class="headerlink" title="测试类型"></a>测试类型</h3><p>回归到测试初衷，验证功能稳定＆可靠性、及时发现功能缺陷性<br>基于测试目的与操作手法，可分为以下几大类测试</p>
</blockquote>
<h4 id="一、回归测试"><a href="#一、回归测试" class="headerlink" title="一、回归测试"></a>一、回归测试</h4><p>每一次软件的迭代及优化都有可能带来不可预料的后果，为了验证迭代及优化的可靠性进行的测试称为回归测试<br>回归测试属于软件生命周期组成部分，其在整个软件测试占据着很大任务量。<br>回归测试的<strong>重点</strong>：验证新添加/改动部分功能的可靠性</p>
<h4 id="二、压力测试"><a href="#二、压力测试" class="headerlink" title="二、压力测试"></a>二、压力测试</h4><p>在接近软件正常运行极限范围里，重复的执行高负载测试，以用来<br>了解软件性能瓶颈，可靠性<br>压力测试<strong>重点</strong>:　灵活的控制负载量，通过立体式的测试，以得到软件＆系统性能极限值</p>
<h4 id="三、性能测试"><a href="#三、性能测试" class="headerlink" title="三、性能测试"></a>三、性能测试</h4><p>通过各项的压力测试可得到软件、系统性能指标，压力(负载)测试属于性能测试</p>
<h4 id="四、安全测试"><a href="#四、安全测试" class="headerlink" title="四、安全测试　"></a>四、安全测试　</h4><p>安全的范围很广，这里取<strong>涉及到软件相关的私密性数据</strong>为基准点<br>测试方法通常有以下几大类：</p>
<ul>
<li>Discovery(辨别):　使用工具在软件、系统使用的场景辨别出潜在的漏洞</li>
<li>Penetration Test(渗透测试):  通过伪装攻击系统、软件找到漏洞，利用漏洞获取私密性数据，这也是也是很多黑客常用的手段来入侵系统</li>
<li>Security Review：确保核心安全防护的措施、标准已在系统、产品得到应用，通过强大的数据分析复查系统、产品安全性，有必要时重新加固、重构系统、产品的安全防护盾</li>
</ul>
<h4 id="五、缺陷追踪测试"><a href="#五、缺陷追踪测试" class="headerlink" title="五、缺陷追踪测试"></a>五、缺陷追踪测试</h4><p>为了便于缺陷的追踪，前期需要建立完整缺陷发生时现场细节数据记录<br>现在一般都会有专门的系统记录系统、软件缺陷bug(如Jira、Matinst)<br>为了提高测试效率，缺陷现场细节记录的完整性(问题复习时的行为、log、截图等)<br>尤为必要</p>
<h4 id="六、自动化测试"><a href="#六、自动化测试" class="headerlink" title="六、自动化测试"></a>六、自动化测试</h4><p>一些需要通过不断重复完成的测试，都可以用来交给自动化<br>这里需要明确一个概念：不是所有的自动化都等于高效率<br>因为，自动化的背后需要完成大量的测试边界条件功能开发(即测试用例开发)</p>
<hr>
<p><strong>回到前面提到的问题，如何实现智能测试?</strong></p>
<ul>
<li>从智能完整定义出发，我们可能永远无法实现这一目标</li>
<li>因为，无法避免要通过大量人力笨拙的通过手动来完成对系统、软件功能验证</li>
</ul>
<p>所以，这里的<strong>智能</strong>实现是在传统的测试有效改善上<br>比较有名气的，轻量级的C++自动化单元测试－－ <a href="https://github.com/philsquared/Catch" target="_blank" rel="external">Catch</a> </p>
<p>它的轻量级轻到，只需要在测试用例中添加一个头文件即可干活<br>有了它，你的软件测试框架可以全部focus到测试用例的开发上<br>只需要你的测试边界条件考虑够全，<strong><a href="https://github.com/philsquared/Catch" target="_blank" rel="external">Catch</a> </strong>就可以帮你完成各种边界测试</p>
<h3 id="Catch-优点"><a href="#Catch-优点" class="headerlink" title="Catch 优点"></a><a href="https://github.com/philsquared/Catch" target="_blank" rel="external">Catch</a> 优点</h3><ul>
<li><p>Really easy to get started , Just Download <a href="https://github.com/philsquared/Catch.git" target="_blank" rel="external">it</a> </p>
</li>
<li><p>Use BDD-style Given-When-Then sections as well as traditional unit test cases. (这一点特别适合测试有着多情景的接口)</p>
</li>
<li><p>Tests can be tagged for easily running ad-hoc groups of tests. (可通过设置特定的tag，测试时通过tag来限定只测试指定单元(或者称case)</p>
</li>
<li><p>Output is through modular reporter objects. Basic textual and XML reporters are included. Custom reporters can easily be added.(通常测试报告是个头疼问题，在这里只有苏爽，可以通过-r 定制输出的测试报告)</p>
</li>
<li><p>… 等等(See <a href="https://github.com/philsquared/Catch/blob/master/docs/why-catch.md" target="_blank" rel="external">Here</a>)</p>
</li>
</ul>
<hr>
<h5 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h5><p><a href="http://baike.baidu.com/link?url=Db_qRumQ4NY8yw2BTbo1-cpVM5GJZud6jDn8wPfYI8hkYNc4m98lJSLf0SJGB1ycSeNxtxFMVC5CPiMR8qOGdbQiAywQqoPkFL6p73jYDkRNPm_x4kOm9zQQuXT73_Jt" target="_blank" rel="external">回归测试</a><br><a href="https://smartbear.com/learn/automated-testing/what-is-regression-testing/" target="_blank" rel="external">回归测试２</a><br><a href="http://doc.mbalib.com/view/9504f25daa0549be95d9f4407fe3d706.html" target="_blank" rel="external">软件可行性测试</a><br><a href="http://baike.baidu.com/link?url=K0K-CwqioZdVd5_7RVC8mR49A1SmAabJBscDC3GlxY879Ay0kXdrNb5_CddV2GccjzHW_cGokI4-Y7sLvAm9V70pWNM-hI7aj5dRbNimHmP8caMc0vBNK6M1fv3l0SYn" target="_blank" rel="external">性能测试</a><br><a href="http://baike.baidu.com/link?url=K0K-CwqioZdVd5_7RVC8mR49A1SmAabJBscDC3GlxY879Ay0kXdrNb5_CddV2GccjzHW_cGokI4-Y7sLvAm9V70pWNM-hI7aj5dRbNimHmP8caMc0vBNK6M1fv3l0SYn" target="_blank" rel="external">Security Testing</a><br><a href="https://en.wikipedia.org/wiki/Penetration_test" target="_blank" rel="external">Penetration Test(渗透测试)</a><br><a href="https://en.wikipedia.org/wiki/Bug_tracking_system" target="_blank" rel="external">Bug Tracking </a> </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Cmake的魅力]]></title>
      <url>blog.jiangbo.work/2017/02/06/Cmake%E7%9A%84%E9%AD%85%E5%8A%9B/</url>
      <content type="html"><![CDATA[<h2 id="CMake"><a href="#CMake" class="headerlink" title="CMake"></a>CMake</h2><blockquote>
<p>对于大工程来说，Cmake的重量级别与作用显得尤为必要。<br>要使用Cmake，也很简单，遵循几个关键的语法段即可。</p>
<p>a. <strong>想了解更多的戳这里<a href="https://cmake.org/cmake/help/v3.0/manual/cmake-language.7.html#syntax" target="_blank" rel="external">cmake 语法[官方]</a></strong><br>b. <a href="https://www.jetbrains.com/help/clion/2016.3/quick-cmake-tutorial.html" target="_blank" rel="external">更为人性的文档Cmake</a>  </p>
</blockquote>
<p>在使用的工程里创建Cmakelists.txt，需要编译的文件按照cmake约定的语法添加目标文件。</p>
<p>以下为cmake<strong>关键字段</strong></p>
<h2 id="project"><a href="#project" class="headerlink" title="project "></a><strong>project </strong></h2><pre><code>project(Target Name)  #target name定义借鉴工程意义
</code></pre><h2 id="set"><a href="#set" class="headerlink" title="set"></a><strong>set</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">	set(target var   source var ) # 将source 变量放入target 中  </div><div class="line">	# source 变量可包含文件、路径、消息、编译工具链、编译选项等</div><div class="line">eg1. </div><div class="line">	 set(CMAKE_CXX_STANDARD  11) # enable C++11 </div><div class="line">eg2</div><div class="line">	 set(message  &quot; Here should add someting &quot;)</div><div class="line">eg3 </div><div class="line">	 set(SELF_TEST_DIR  $&#123;CATCH_DIR&#125;/projects/SelfTest)</div></pre></td></tr></table></figure>
<h2 id="add-executable"><a href="#add-executable" class="headerlink" title="add_executable"></a><strong>add_executable</strong></h2><pre><code>add_excutable(bin name  source file ) # 根据source file 生成目标可执行文件
</code></pre><h2 id="add-library"><a href="#add-library" class="headerlink" title="add_library"></a><strong>add_library</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">add_library (my_library STATIC|SHARED|MODULE $&#123;SOURCE_FILES&#125;)</div><div class="line"></div><div class="line">to build  a library </div><div class="line">- static :   bulid static library   (*.a)</div><div class="line">- shared:  build share library (*.so)</div><div class="line">- module:  build  plugin library ,  it can be load dynamicall at runningtime</div></pre></td></tr></table></figure>
<h2 id="target-link-libraries"><a href="#target-link-libraries" class="headerlink" title="target_link_libraries"></a><strong>target_link_libraries</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">target_link_libraies(target   libname) #目标文件需要依赖于libname 的库</div></pre></td></tr></table></figure>
<h2 id="target-compile-options"><a href="#target-compile-options" class="headerlink" title="target_compile_options"></a><strong>target_compile_options</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">target_compile_options( target file or bin   MODE -Wall -Wextra )</div><div class="line"></div><div class="line">MODE有以下区分，其中差异见以下，个人理解为，所取公共环境变量的依赖关系不一样。</div><div class="line">- private : </div><div class="line">- public :</div><div class="line">- interface :</div></pre></td></tr></table></figure>
<p>以上差异有两种<br><a href="https://cmake.org/cmake/help/v3.1/prop_tgt/COMPILE_DEFINITIONS.html#prop_tgt:COMPILE_DEFINITIONS" target="_blank" rel="external">差异1</a>  vs  <a href="https://cmake.org/cmake/help/v3.1/prop_tgt/INTERFACE_COMPILE_DEFINITIONS.html#prop_tgt:INTERFACE_COMPILE_DEFINITIONS" target="_blank" rel="external">差异2</a> </p>
<h2 id="function"><a href="#function" class="headerlink" title="function"></a><strong>function</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">	主要格式 如下</div><div class="line">	function()</div><div class="line">	..... #实现内部特定工作</div><div class="line">	endfunction </div><div class="line">	</div><div class="line">eg:</div><div class="line">	function(CheckFileList LIST_VAR FOLDER)</div><div class="line">  set(MESSAGE &quot; should be added to the variable $&#123;LIST_VAR&#125;&quot;)</div><div class="line">  set(MESSAGE &quot;$&#123;MESSAGE&#125; in $&#123;CMAKE_CURRENT_LIST_FILE&#125;\n&quot;)</div><div class="line">  file(GLOB GLOBBED_LIST &quot;$&#123;FOLDER&#125;/*.cpp&quot;</div><div class="line">                         &quot;$&#123;FOLDER&#125;/*.hpp&quot;</div><div class="line">                         &quot;$&#123;FOLDER&#125;/*.h&quot;)</div><div class="line">  list(REMOVE_ITEM GLOBBED_LIST $&#123;$&#123;LIST_VAR&#125;&#125;)</div><div class="line">  foreach(EXTRA_ITEM $&#123;GLOBBED_LIST&#125;)</div><div class="line">    string(REPLACE &quot;$&#123;CATCH_DIR&#125;/&quot; &quot;&quot; RELATIVE_FILE_NAME &quot;$&#123;EXTRA_ITEM&#125;&quot;)</div><div class="line">    message(AUTHOR_WARNING &quot;The file \&quot;$&#123;RELATIVE_FILE_NAME&#125;\&quot;$&#123;MESSAGE&#125;&quot;)</div><div class="line">  endforeach()</div><div class="line">endfunction()</div></pre></td></tr></table></figure>
<h2 id="include-directories"><a href="#include-directories" class="headerlink" title="include_directories"></a><strong>include_directories</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">include_directories(head file path) # 包含头文件目录</div></pre></td></tr></table></figure>
<h2 id="CMAKE-C-COMPILER"><a href="#CMAKE-C-COMPILER" class="headerlink" title="CMAKE_C_COMPILER"></a><strong>CMAKE_C_COMPILER</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">set(CMAKE_C_COMPILER &quot;/usr/bin/cc&quot; )##指定编译器（默认未设置，则取系统gcc版本)</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[运营书单]]></title>
      <url>blog.jiangbo.work/2017/02/04/%E4%BA%A7%E5%93%81%E4%B9%A6%E5%8D%95/</url>
      <content type="html"><![CDATA[<h2 id="运营"><a href="#运营" class="headerlink" title="运营"></a>运营</h2><p><strong>“无书不智慧，有书方有道”</strong><br>亦是迷茫不知所措，亦是得沉下心来静静。</p>
<h3 id="一-扩宽思维格局、视角"><a href="#一-扩宽思维格局、视角" class="headerlink" title="一.  扩宽思维格局、视角"></a>一.  扩宽思维格局、视角</h3><p>迷茫是好事，至少知道想要有点作为，而不知如何下手。<br>通过阅读可以站在巨人的肩膀上，会有好的俯瞰视角。</p>
<h3 id="二-通过阅读长取优秀的经验"><a href="#二-通过阅读长取优秀的经验" class="headerlink" title="二. 通过阅读长取优秀的经验"></a>二. 通过阅读长取优秀的经验</h3><p>特别是踏入新领域，会面临许许多多的坑坑洼洼。<br>如何使产品&amp;运营左右逢源，长取经验尤为必要。 </p>
<h3 id="三-激励自身不断学习-amp-进取"><a href="#三-激励自身不断学习-amp-进取" class="headerlink" title="三. 激励自身不断学习&amp;进取"></a>三. 激励自身不断学习&amp;进取</h3><p>但凡成书立说，基本上经历了系统化的思维历练。<br>其中不乏优质思维&amp;创意，值得深入研究&amp;转化为“有效价值”。</p>
<p>聚沙成塔历来都是知识沉淀的基本之道。</p>
<p>附有意思的几本书，以于自勉<br><strong>《无价》</strong><br>价格策略</p>
<p><strong>《引爆点》</strong><br>营销策略 </p>
<p><strong>《需求》</strong><br>需求缔造商业传奇的魔杖</p>
<p><strong>《免费》</strong><br>未找到简介</p>
<p><strong>《超越门户》</strong><br>新一代互联网新闻人的光荣与梦想 </p>
<p><strong>《定位》</strong><br>争夺用户心智战略</p>
<p><strong>《腾讯方法》</strong><br>探寻巨头创新之道</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[乐视究竟能走多远?]]></title>
      <url>blog.jiangbo.work/2017/02/03/%E4%B9%90%E8%A7%86%E7%A9%B6%E7%AB%9F%E8%83%BD%E8%B5%B0%E5%A4%9A%E8%BF%9C/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[小米为何能成功]]></title>
      <url>blog.jiangbo.work/2017/02/03/%E5%B0%8F%E7%B1%B3%E4%B8%BA%E4%BD%95%E8%83%BD%E6%88%90%E5%8A%9F/</url>
      <content type="html"><![CDATA[<h2 id="站在风口上，猪都能飞起来"><a href="#站在风口上，猪都能飞起来" class="headerlink" title="站在风口上，猪都能飞起来"></a>站在风口上，猪都能飞起来</h2><p><strong>我们站在哪里?</strong></p>
<h2 id="满世界的互联网化，究竟如何互联网？"><a href="#满世界的互联网化，究竟如何互联网？" class="headerlink" title="满世界的互联网化，究竟如何互联网？"></a>满世界的互联网化，究竟如何互联网？</h2><p><strong>团队</strong></p>
<p><strong>产品</strong></p>
<p><strong>思维</strong></p>
<p><strong>营销</strong></p>
<h2 id="互联网就能成功"><a href="#互联网就能成功" class="headerlink" title="互联网就能成功?"></a>互联网就能成功?</h2><p><strong>运营</strong></p>
<p><strong>模式</strong></p>
<p><strong>用户</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2017年开头篇]]></title>
      <url>blog.jiangbo.work/2017/02/03/2017%E5%B9%B4%E5%BC%80%E5%A4%B4%E7%AF%87/</url>
      <content type="html"><![CDATA[<h2 id="新气象"><a href="#新气象" class="headerlink" title="新气象"></a>新气象</h2><p><strong>技术能成功吗?</strong></p>
<p>17年将是以技术为主导，扩展以产品理为辅的成长路线。<br>技术终究会改变世界，但是它在占领用户群的战场上难以很好的施展拳脚。<br>亦如古时候的武将终将难以铸成大器，虽然功劳赫赫，但也只是个过去时。<br>不是，心理悲观，擦亮眼睛种种的事实历历在目。<br>所以，一个成就帝王之国的精神，终将来自于情怀，亦如老罗的锤子情怀始终会有大部分的铁杆粉丝不离不弃的跟随。</p>
<p><strong>产品思维</strong><br>技术的巅峰，是一个工程师终生追求的目标，亦是最高的荣誉。<br>但是，技术的巅峰并不能带来无穷大面积的用户基数，并不一定能带来颠覆性的成功。<br>不是，衡量科技界的成功标准被改变了，而是衡量科技界的标准从来任何时候都把控在普通的用户人心里，他们带有的评价、他们的使用习惯、他们的使用的脾性等是承载当今产品成功这一大船的河流，水能载舟，亦能覆舟。</p>
<p>互联网的时代，有句话说是“粉丝的时代”。<br>粉丝即是口碑，用户的粘性是任何一家互联网公司日夜费劲心思都想要把控的指向标。<br>如何从传统行业转向<code>（过渡到）</code>互联网行业，是每一家公司费劲心力需要思考的课题。<br>互联网世界是美好的，却也是赤裸裸的残酷。</p>
<hr>
<p>###我们能否可以做些有意思的可以实现盈利的业务？<br>对于华丽转身的背后有很多问题需要去考虑。<br>团队、服务、模式、运营、竞争、核心聚合力、营销各个方面都需要紧紧结合，形成一张有承载力的蜘蛛网，既能网住大大小小的猎物，也能抵御狂风暴雨的冲击。</p>
<p>对于产品思维，从自身背景上优势出发逐渐改变原有业务盈利模式，借助原有的业务衍生出有增长力的业务。<br>比如，我们有强有力的供应链群，再加上广大基数的客户群，我们是否可以转做内容运营，以视频源(娱乐、影视、教育、等等资源)为核心载体，带上我们策略性的推广这些内容(是否可以尝试开展这样的模式：<strong>一定的让价</strong>+<strong>内容入住</strong>  (我们真正的目的，通过积累广大的用户基数，来实现通过内容的终身盈利）</p>
<p><strong>问题来了？</strong><br>同样的这种模式，乐视不是一直在做。<br><strong>为何乐视没取得大面积的成功?</strong><br><a href="http://tech.ifeng.com/a/20151020/41493295_0.shtml" target="_blank" rel="external">谁能干掉乐视？</a> </p>
<p>海信、创维、TCL、康佳等国内传统电视亦各展身手将电视行业市场瓜分的无剩所几。<br>上面提到通过靠做内容来实现盈利，亦是一条血路。<br>爱奇艺、优酷等这几家优质视频商，已占领着视频源的大头。他们亦是短时间难以撼动的大山。</p>
<p>既然做内容走不通，做品牌仍受限制。<br>那我们的出路在哪里？不能坐等TV天花板靠近而束手无策。<br>17年我们是变？究竟如何变？</p>
<p>路都是走出来的，我们的路在哪里？</p>
<p>我们的优势：良好的供应链群，为我们提供有力的保障。<br>                 全世界的优质的客户群在享受着我们的服务。<br>我们是否可以忘记所取得这些成绩，推倒重来？</p>
<p>逐渐去掉服务商（制造商）的帽子，开始新的思维。<br>尝试是法宝，不断尝试跟重启。</p>
<p><strong>钱、人、平台</strong>三者融合的足够好就可以干成千古伟业。<br>经历小米轰炸后的市场，大家都对互联网心存敬畏。<br>未来的用户会更懒，会更挑剔，会更苛刻。</p>
<p>基于硬件横向扩展做不一样的内容跟服务可以作为一种尝试方向。<br>做自己的品牌是最后的正解，也是最好的正解。<br>对于品牌的运营与建设，我们任重道远。</p>
]]></content>
    </entry>
    
  
  
</search>
